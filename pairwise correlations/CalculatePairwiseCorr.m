function corrCoefs = CalculatePairwiseCorr(spikes,stim,nvp)
% Mean-matching is performed here over all trials across stimulus types,
% else we would repeat neurons (neurons are repeated in the "datasets"
% generated by considering firing under each stimulus type to be its own
% dataset).

arguments
    spikes
    stim
    nvp.residuals = true
    nvp.unwind = true % unwind corr coef matrix into vector
end

% Obtain nUnits x nTimespoints x nTrials array of firing rates for
% population 1 and 2.
pop1 = spikes{1};
pop2 = spikes{2};

% Mean match to derive three populations (e.g., source V1, target V1, and
% V2).
[sourcePop1, targetPop1, targetPop2] = MeanMatch(pop1, pop2, 'nReps', 1);

% Partition by stimulus type. This allows us to calculate PSTHs within
% stimulus type, else the trial averaging step will destroy essentially all
% structure.
sourcePop1 = PartitionByType(sourcePop1, stim);
targetPop1 = PartitionByType(targetPop1, stim);
targetPop2 = PartitionByType(targetPop2, stim);

% Ensure nTimepoints and nTrials is consistent between populations. If so,
% derive these values from population 1. Also determine number of units
% from each population.
sizes1 = size(sourcePop1);
sizes2 = size(targetPop1);
sizes3 = size(targetPop2);
assert(all(sizes1(2:end)==sizes2(2:end)) && all(sizes1(2:end)==sizes3(2:end)), ...
       'All array dimensions except for nUnits must match between population arrays.')
[~, nTimepts, nTrialsStim, nStimTypes] = size(sourcePop1);
nObsTotal = nTimepts*nTrialsStim*nStimTypes;
nUnits1 = sizes1(1);
nUnits2 = sizes2(1);
nUnits3 = sizes3(1);

% Option to convert firing rates to residuals.
if nvp.residuals
    
    % Calculate PSTH of mean across trials within current type (with
    % expansion via repmat). 
    psthSourcePop1 = repmat(mean(sourcePop1, 3), 1, 1, nTrialsStim, 1);
    psthTargetPop1 = repmat(mean(targetPop1, 3), 1, 1, nTrialsStim, 1);
    psthTargetPop2 = repmat(mean(targetPop2, 3), 1, 1, nTrialsStim, 1);
    
    % Subtract PSTH from each trial to obtain residuals.
    sourcePop1 = sourcePop1 - psthSourcePop1;
    targetPop1 = targetPop1 - psthTargetPop1;
    targetPop2 = targetPop2 - psthTargetPop2;
end

% Reshape from nUnits x nTimespoints x nTrialsStim x nTypes to
% nTimepoints*nTrialsAll x nUnits.
sourcePop1 = reshape(sourcePop1, [nUnits1 nObsTotal])';
targetPop1 = reshape(targetPop1, [nUnits2 nObsTotal])';
targetPop2 = reshape(targetPop2, [nUnits3 nObsTotal])';

% Calculate correlation of all pairs between source pop 1 and target pop 1
% and between source pop 1 and target pop 2.
sourcePop1 = normalize(sourcePop1 - mean(sourcePop1)); % should be mean-centered already if residuals, but not if left as firing rates
targetPop1 = normalize(targetPop1 - mean(targetPop1));
targetPop2 = normalize(targetPop2 - mean(targetPop2));
corrCoefs{1} = (sourcePop1' * targetPop1) / (nObsTotal - 1);
corrCoefs{2} = (sourcePop1' * targetPop2) / (nObsTotal - 1);

% Option to return vector of corr coeffs instead of matrix.
if nvp.unwind
    corrCoefs{1} = corrCoefs{1}(:);
    corrCoefs{2} = corrCoefs{2}(:);
end

end